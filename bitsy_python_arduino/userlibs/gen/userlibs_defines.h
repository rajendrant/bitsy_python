// DO NOT EDIT THIS FILE
// This file is autogenerated from userlibs.py

#include "userlibs/arduino.h"
#include "userlibs/serial.h"

Variable userlib_module_arduino(uint8_t function, uint8_t argcount, Variable arg[]) {
    switch(function) {
    case 0:
        return arduino::digitalRead(argcount, arg);
    case 1:
        return arduino::digitalWrite(argcount, arg);
    case 2:
        return arduino::pinMode(argcount, arg);
    default:
        assert(false);
    }
    return Variable::Zero();
}

Variable userlib_module_serial(uint8_t function, uint8_t argcount, Variable arg[]) {
    switch(function) {
    case 0:
        return serial::printstr(argcount, arg);
    case 1:
        return serial::println(argcount, arg);
    default:
        assert(false);
    }
    return Variable::Zero();
}

Variable userlib_module_spi(uint8_t function, uint8_t argcount, Variable arg[]) {
    switch(function) {
    default:
        assert(false);
    }
    return Variable::Zero();
}

Variable userlib_module_i2c(uint8_t function, uint8_t argcount, Variable arg[]) {
    switch(function) {
    default:
        assert(false);
    }
    return Variable::Zero();
}

Variable userlib_module_servo(uint8_t function, uint8_t argcount, Variable arg[]) {
    switch(function) {
    default:
        assert(false);
    }
    return Variable::Zero();
}

Variable userlib_module_nrf24(uint8_t function, uint8_t argcount, Variable arg[]) {
    switch(function) {
    default:
        assert(false);
    }
    return Variable::Zero();
}

Variable userlib_module_eeprom(uint8_t function, uint8_t argcount, Variable arg[]) {
    switch(function) {
    default:
        assert(false);
    }
    return Variable::Zero();
}

Variable call_userlib_function(uint8_t module, uint8_t function, uint8_t argcount, Variable arg[]) {
    switch(module) {
    case 0:
        return userlib_module_arduino(function, argcount, arg);
    case 1:
        return userlib_module_serial(function, argcount, arg);
    case 2:
        return userlib_module_spi(function, argcount, arg);
    case 3:
        return userlib_module_i2c(function, argcount, arg);
    case 4:
        return userlib_module_servo(function, argcount, arg);
    case 5:
        return userlib_module_nrf24(function, argcount, arg);
    case 6:
        return userlib_module_eeprom(function, argcount, arg);
    default:
        assert(false);
    }
    return Variable::Zero();
}
