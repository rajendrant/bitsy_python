# Add custom user libraries and functions to the below list.
userlibs_list = [
    {
        'name': 'arduinolib',
        'functions': ['digitalRead', 'digitalWrite', 'pinMode'],
    },
    {
        'name': 'serial',
        'functions': ['printstr', 'println'],
        'disabled': 1,
    },
    {
        'name': 'spi',
        'functions': ['begin', 'end', 'beginTransaction', 'endTransaction', 'transfer'],
    },
    {
        'name': 'i2c',
        'functions': ['begin', 'beginTransmission', 'endTransmission', 'write', 'available', 'read'],
        'disabled': 1,
    },
    {
        'name': 'servo',
        'functions': ['attach', 'detach', 'read', 'write'],
        'disabled': 1,
    },
    {
        'name': 'nrf24',
        'functions': [],
    },
    {
        'name': 'eeprom',
        'functions': ['read', 'write', 'update'],
    },
    {
        'name': 'testuserlib',
        'functions': ['printstr', 'println', 'math_add', 'math_power'],
    },
]

userlibs = {}

def init():
    for idx_m, m in enumerate(userlibs_list):
        userlibs['userlibs.'+m['name']] = {
            'name': m['name'],
            'id': idx_m,
            'functions': {f:i for i, f in enumerate(m['functions'])},
            'disabled': 'disabled' in m and m['disabled'],
            'test': m['name'].startswith('test')
        }

def gen_userlib_module_handler_api(out, m):
    out.write("""\

#include "../%s.h"
""" % (m['name']))
    out.write("""
Variable userlib_module_%s(uint8_t function, uint8_t argcount, Variable arg[]) {
    switch(function) {
""" % (m['name']))
    for i, f in enumerate(m['functions']):
        out.write("""\
    case %d:
        return %s::%s(argcount, arg);
""" % (i, m['name'], f))
    out.write("""\
    default:
        assert(false);
    }
    return Variable::Zero();
}
""")

def main():
    import os
    path=os.path.dirname(os.path.abspath(__file__))+'/../bitsy_python_arduino/userlibs/gen/userlibs_defines.h'
    out = open(path, 'w')
    out.write("""\
// DO NOT EDIT THIS FILE
// This file is autogenerated from userlibsgen.py

""")
    out.write("#ifdef ARDUINO\n")
    for k in userlibs:
        if not userlibs[k]['disabled'] and not userlibs[k]['test']:
            gen_userlib_module_handler_api(out, userlibs[k])
    out.write("#endif\n\n")

    out.write("#ifndef ARDUINO\n")
    for k in userlibs:
        if not userlibs[k]['disabled'] and userlibs[k]['test']:
            gen_userlib_module_handler_api(out, userlibs[k])
    out.write("#endif\n\n")

    out.write("""\

bool is_userlib_module_enabled(uint8_t module) {
    switch(module) {
""")
    for _, m in userlibs.iteritems():
        if not m['disabled']:
            out.write("""\
    case %d: // %s
""" % (m['id'], m['name']))
    out.write("""\
        return true;
    }
    return false;
}
""")

    out.write("""\

Variable call_userlib_function(uint8_t module, uint8_t function, uint8_t argcount, Variable arg[]) {
    switch(module) {
""")
    out.write("#ifdef ARDUINO\n")
    for _, m in userlibs.iteritems():
        if not m['disabled'] and not m['test']:
            out.write("""\
    case %d:
        return userlib_module_%s(function, argcount, arg);
""" % (m['id'], m['name']))
    out.write("#endif\n\n")

    out.write("#ifndef ARDUINO\n")
    for _, m in userlibs.iteritems():
        if not m['disabled'] and m['test']:
            out.write("""\
    case %d:
        return userlib_module_%s(function, argcount, arg);
""" % (m['id'], m['name']))
    out.write("""\
#endif
    default:
        assert(false);
    }
    return Variable::Zero();
}
""")
    outpy = open(os.path.dirname(os.path.abspath(__file__))+'/userlibs/__init__.py', 'w')
    outpy.write("""\
# DO NOT EDIT THIS FILE
# This file is autogenerated from userlibsgen.py

""")
    for k in userlibs:
        outpy.write("import %s\n"%(userlibs[k]['name']))
    for m in [userlibs[k] for k in userlibs if not userlibs[k]['test']]:
        path=os.path.dirname(os.path.abspath(__file__))+'/userlibs/'+m['name']+'.py'
        outpy = open(path, 'w')
        outpy.write("""\
# DO NOT EDIT THIS FILE
# This file is autogenerated from userlibsgen.py

""")
        for f in m['functions']:
            outpy.write("""\
def %s(*arg):
    pass

""" % (f))
        

init()
if __name__ == "__main__":
    main()
